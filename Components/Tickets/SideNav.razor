@inject Tools.Misc.AccessTokenHelper _accesstokenHelper;
@inject IConfiguration _configuration;

<div id="pnlTicketSidebar" class="w3-sidebar w3-bar-block w3-card w3-animate-left w3-card w3-container" style="width:89px;">
    <a href="/" class="w3-bar-item w3-button w3-transparent w3-hover-black w3-round w3-border w3-border-dark-grey w3-margin-top">
        <span class="material-symbols-sharp" title="Back" style="margin-top:4px;">arrow_back</span>
    </a>
    <a href="/Tickets/List" class="w3-bar-item w3-button w3-transparent w3-hover-black w3-round w3-border w3-border-dark-grey w3-margin-top">

        @if(ProjectGuid != Guid.Empty && ProjectName != string.Empty){
            <span class="material-symbols-sharp" title="List ticket for project @ProjectName" style="margin-top:4px;">list</span>
        }
        else{
            <span class="material-symbols-sharp" title="View all available tickets" style="margin-top:4px;">list</span>
        }
    </a>
    
    <a href="/Tickets/" class="w3-bar-item w3-button w3-transparent w3-round w3-border w3-border-dark-grey w3-hover-red w3-hover-border-red w3-margin-top w3-bottom" @onclick="() => { OnDelete_ClickAsync.InvokeAsync(); }">
        <span class="material-symbols-sharp" title="Delete this ticket">delete</span>
    </a>
</div>

@code{
    [Parameter]
    public string? ProjectName {set; get;}
    [Parameter]
    public Guid ProjectGuid {set; get;}
    [Parameter]
    public bool EnableDeleteButton {set; get;} = true;
    [Parameter]
    public EventCallback<EventArgs> OnDelete_ClickAsync {set; get;}

    EventArgs e = new EventArgs(){
        
    }

}