@using Models.Authentications;
@inject Tools.Misc.AccessTokenHelper _accesstokenHelper;
@inject NavigationManager _navigationManager;
@inject IConfiguration _configuration;

<div class="w3-bar w3-black">
    <a href="/" class="w3-bar-item w3-button w3-transparent w3-hover-white w3-ripple">Home</a>
    <a href="/Projects" class="w3-bar-item w3-button w3-transparent w3-hover-white w3-ripple">Projects</a>
    <a href="/Tickets" class="w3-bar-item w3-button w3-transparent w3-hover-white w3-ripple">Tickets</a>
    <button type="button" class="w3-bar-item w3-button w3-transparent w3-hover-white w3-ripple w3-right" @onclick="btnLogout_ClickAsync">Logout</button>

    @if(requestLogout){
        <BugTracker.Components.Misc.Confirmation.ConfirmationModal Title="Logout?" Message="Do you want to logout?" OnConfirm="@btnConfirmLogout_ClickAsync" OnCancel="@btnCancelLogout_ClickAsync" />
    }
</div>


@code{
    bool requestLogout = false;
    string errorMessage = string.Empty;

    protected async Task btnLogout_ClickAsync(){
        requestLogout = true;
        await Task.Yield();
    }

    protected async Task btnConfirmLogout_ClickAsync(){
        string address = _configuration["BugTrackerBackendAddress"] + "/Authentication/Logout";
        try{
            var result = await new UserLoginModel().Logout(_accesstokenHelper.accessToken, address);
            if(result){
            
            }
        }
        catch(Exception err){
            Console.WriteLine(err.Message);
        }
        finally{
            _accesstokenHelper.SetAccesstoken(string.Empty);
            _navigationManager.NavigateTo("/", true);    
        }
    }

    protected async Task btnCancelLogout_ClickAsync(){
        requestLogout = false;
        errorMessage = string.Empty;
        await Task.Yield();
    }
}