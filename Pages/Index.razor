@page "/"
@using Models;
@using Models.Projects;
@using Models.Tickets;
@inject Tools.Misc.AccessTokenHelper AccessTokenHelper;
@inject IConfiguration _configuration;

<NavMenu />
<div id="pnlWorkArea">
    <div class="w3-container">
        <h1>Projects <a href="/Projects/AddProject" class="w3-button w3-transparent w3-border w3-border-black w3-round w3-hover-black w3-ripple w3-small">Add Project</a></h1>
        <p>Overview of some of your project can be seen  here.</p>
    </div>
    @if(isLoading == -1){
        <div class="w3-center">
            <img src="images/69a6b00a04b341828841fba193a51ee5_4970450105616380596.jpg" class="w3-images" style="max-height:300px;" />
        </div>
    }
    else if(isLoading == 0){
        <div class="w3-center">
            <img src="images/Eie9.gif" class="w3-images" style="max-height:300px;" />
        </div>
    }
    else if(isLoading == 1){
        <div class="w3-bar">
            @foreach(var project in projects){
                <div id="pnlProject1Container" class="w3-bar-item">
                    <div id="pnlProject1" class="w3-display-container w3-block backgroundCover" style="width:335px; height:442px; background-image:url('@project.project.BackgroundImageUrl');">
                        <div class="w3-display-topleft w3-block backgroundCover" style="height:calc( 100% - 300px ); background-image:url('@project.project.BackgroundImageUrl');">
                            <img class="w3-display-middle w3-image" style="height:50%;" src="@project.project.IconUrl" />
                        </div>
                        <div id="pnlProject1OverviewContainer" class="w3-display-bottomleft w3-block w3-theme-d5 backdropBlur" style="height:300px;">
                            <header id="headProject2Title" class="w3-container">
                                <h1 class="w3-medium w3-wide textOverflow" title="@project.project.Name">@project.project.Name</h1>
                            </header>
                            <div id="pnlProject1TicketOverviewContainer" class="w3-bar w3-border-top w3-border-bottom w3-border-white">
                                <div class="w3-left">
                                    <a href="/Tickets/List?id=@project.project.Guid" class="w3-bar-item w3-button w3-transparent w3-hover-white w3-ripple" title="See posted tickets"><span class="material-symbols-sharp">problem</span></a>
                                    <a href="/Projects/Edit?id=@project.project.Guid" class="w3-bar-item w3-button w3-transparent w3-hover-white w3-ripple" title="Edit project"><span class="material-symbols-sharp">edit</span></a>
                                </div>
                                <div class="w3-right">
                                    <button class="w3-bar-item w3-button w3-transparent w3-hover-white w3-ripple" @onclick="() => { RequestDelete_Click(project.project.Guid.ToString(), project.project.Name);}"><span class="material-symbols-sharp" title="Delete this project">delete</span></button>
                                </div>
                            </div>
                            <div id="pnlProject1LatestTicketOverviewContainer">
                            <div class="w3-bar">
                                <label class="w3-bar-item">Latest Tickets (@project.tickets.Count)</label>
                            </div>
                            <div class="w3-bar-block w3-container">
                                @for(int i = 0; i < 3; i++){
                                    <a href="/Tickets/ViewTicket?id=@project.tickets[i].guid" class="w3-bar-item w3-button w3-transparent w3-border w3-border-white w3-hover-white w3-round textOverflow w3-margin-bottom">@project.tickets[i].Name</a>
                                }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if(isLoading == 2){
        <div class="w3-container">
            <div class="w3-border w3-border-red">
                <div class="w3-cell-row">
                    <div class="w3-cell w3-cell-middle w3-center w3-mobile" style="width: 150px; padding: 8px 8px 8px 8px; ">
                        <img src="https://www.frengkysinaga.com/Sources/Images/bocchi_down.jpg" style="width: 100%;" class="w3-image" \>
                    </div>
                    <div class="w3-cell w3-cell-middle w3-mobile w3-padding">
                        <div>
                            <p>Could not find any projects. Do you want to <a href="/Projects/AddProject/">add</a> a new project?</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    @if(requestDelete){
        <div class="w3-modal" style="display:block;">
            <div class="w3-modal-content">
                <header class="w3-container">
                    <h5 class="textOverflow">Confirm deletion</h5>
                </header>
                <div class="w3-container">
                    Are you sure to delete "@nameToDelete"?
                </div>
                <footer class="w3-bar w3-padding">
                    <button class="w3-bar-item w3-button w3-round w3-border w3-border-black w3-hover-red w3-ripple" @onclick="ConfirmDelete"><span class="material-symbols-sharp" style="padding-top:4px;">delete_forever</span></button> 
                    <button class="w3-bar-item w3-button w3-round w3-border w3-border-black w3-ripple w3-margin-left" @onclick="CancelDelete"><span class="material-symbols-sharp" style="padding-top:4px;">cancel</span></button> 
                </footer>
            </div>
        </div>
    }
</div>

@code{
    string ProjectList = string.Empty;
    List<ProjectModel> projects = new ();
    int isLoading = 0;
    string errorMessage = string.Empty;
    
    bool requestDelete = false;
    string guidToDelete = string.Empty;
    string nameToDelete = string.Empty;
    string modelStyle = "none";

    protected override async Task OnInitializedAsync(){
        try{
            var projectList = await new Models.Projects.Project().GetProjects(8);

            if(projectList.Count > 0){
                isLoading = 1;

                foreach(var project in projectList){
                    Project projectTemp = new ();
                    projectTemp.Name = project.name;
                    projectTemp.Guid = project.guid;
                    projectTemp.BackgroundImageUrl = project.backgroundImageUrl;
                    projectTemp.IconUrl = project.iconUrl;

                    Dictionary<Guid, string> tickets = new Models.Tickets.Ticket().GetTickets(Guid.NewGuid(), AccessTokenHelper.accessToken);

                    ProjectModel projectModel = new ();
                    projectModel.project = projectTemp;
                    projectModel.tickets = new ();

                    foreach(var ticket in tickets){
                        Ticket ticketTemp = new ();
                        ticketTemp.Name = ticket.Value;
                        ticketTemp.guid = ticket.Key;
                    }
                    projects.Add(projectModel);
                }
            }
            else{
                isLoading = 2;
            }
        }catch(Exception err){
            Console.WriteLine(err);
        }
    }

    protected async Task RequestDelete_Click(string guid, string name){
        requestDelete = true;
        guidToDelete = guid;
        nameToDelete = name;
    }

    protected async Task ConfirmDelete(){
        Project project = new Project();
        try{
            await project.DeleteProject(Guid.Parse(guidToDelete), _configuration["BugTrackerBackendAddress"], AccessTokenHelper.accessToken);
        }
        catch(Exception err){
            System.Console.WriteLine(err.Message);
        }
    }
    protected async Task CancelDelete(){
        requestDelete = false;
        guidToDelete = string.Empty;
        nameToDelete = string.Empty;
    }
}