@page "/"
@using Models;
@using Models.Projects;
@using Models.Tickets;
@using BugTracker.Pages.Projects.Components;
@using BugTracker.Components.Misc.Confirmation;
@inject Tools.Misc.AccessTokenHelper AccessTokenHelper;
@inject IConfiguration _configuration;
@inject NavigationManager _navigation;

<NavMenu />
<div id="pnlWorkArea">
    <div class="w3-container">
        <h1>Projects <a href="/Projects/AddProject" class="w3-button w3-transparent w3-border w3-border-black w3-round w3-hover-black w3-ripple w3-small">Add Project</a></h1>
        <p>Overview of some of your project can be seen  here.</p>
    </div>
    @if(isLoading == -1){
        <BugTracker.Pages.Errors.Components.Standard Image="images/69a6b00a04b341828841fba193a51ee5_4970450105616380596.jpg" Message="@errorMessage" />
    }
    else if(isLoading == 0){
        <div class="w3-center">
            <img src="images/Eie9.gif" class="w3-images" style="max-height:300px;" />
            <div class="w3-center">
                <span>Still Loading</span><br />
                <span>@errorMessage</span>
            </div>
        </div>
    }
    else if(isLoading == 1){
        <div class="w3-bar">
            @foreach(var project in projects){
                <ProjectCard Guid="@project.project.Guid.ToString()" Name="@project.project.Name" Icon="@project.project.IconUrl" Background="@project.project.BackgroundImageUrl" Tickets="@project.tickets" OnClick="RequestDeleteAsync_Click" />
            }
        </div>
    }
    else if(isLoading == 2){
        <div class="w3-container">
            <div class="w3-border w3-border-red">
                <div class="w3-cell-row">
                    <div class="w3-cell w3-cell-middle w3-center w3-mobile" style="width: 150px; padding: 8px 8px 8px 8px; ">
                        <img src="https://www.frengkysinaga.com/Sources/Images/bocchi_down.jpg" style="width: 100%;" class="w3-image" \>
                    </div>
                    <div class="w3-cell w3-cell-middle w3-mobile w3-padding">
                        <div>
                            <p>Could not find any projects. Do you want to <a href="/Projects/AddProject/">add</a> a new project?</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    @if(requestDelete){
        <ConfirmationModal Message="@deleteMessage" Guid="@guidToDelete" OnConfirm="ConfirmDelete" OnCancel="CancelDelete" />
    }
</div>

@code{
    string ProjectList = string.Empty;
    List<ProjectModel> projects = new ();
    int isLoading = 0;
    string errorMessage = string.Empty;
    
    bool requestDelete = false;
    string guidToDelete = string.Empty;
    string nameToDelete = string.Empty;
    string deleteMessage = "Confirm delete ";
    string modelStyle = "none";

    protected override async Task OnInitializedAsync(){
        try{
            var projectListTemp = await new Models.Projects.Project().GetProjects(2000);

            if(projectListTemp.Count > 0){
                isLoading = 1;
                foreach(var project in projectListTemp){
                    Project projectTemp = new ();
                    projectTemp.Name = project.name;
                    projectTemp.Guid = project.guid;
                    projectTemp.BackgroundImageUrl = project.backgroundImageUrl;
                    projectTemp.IconUrl = project.iconUrl;

                    ProjectModel projectModel = new ();
                    projectModel.project = projectTemp;
                    projectModel.tickets = new();
                    try{
                        string address = _configuration["BugTrackerBackendAddress"] + "/Ticket/" + projectTemp.Guid.ToString();
                        var receivedTicket = await new Models.Tickets.Ticket().GetProjectTickets(project.guid, AccessTokenHelper.accessToken, address);
                        int counter = 0;
                        foreach(var ticket in receivedTicket){
                            var tempTicket = new Ticket(){
                                guid = ticket.Guid,
                                Name = ticket.Name,
                                DateCreated = ticket.DateCreated
                            };
                            projectModel.tickets.Add(tempTicket);
                            counter++;
                            if(counter == 3)
                                break;
                        }
                    }
                    catch{
                        // Skip. It's just an error thrown by api because how the return type works in web api
                    }
                    
                    projects.Add(projectModel);
                }
            }
            else{
                isLoading = 2;
            }
        }catch(Exception err){
            isLoading = -1;
            errorMessage = err.Message;
        }
    }

    protected async Task RequestDeleteAsync_Click(Models.Projects.ProjectShortEventArgs e){
        requestDelete = true;
        guidToDelete = e.guid.ToString();
        nameToDelete = e.Name;
        deleteMessage = "Confirm delete " + nameToDelete + "?";
    }

    protected async Task ConfirmDelete(){
        Project project = new Project();
        try{
            string address = _configuration["BugTrackerBackendAddress"] + "/project";
            System.Console.WriteLine(address);
            await project.DeleteProject(Guid.Parse(guidToDelete), address, AccessTokenHelper.accessToken);

            // Remove deleted item from list
            for(int i = 0; i < projects.Count; i++){
                // Find guid and remove when found;
                if(projects[i].project.Guid.ToString() == guidToDelete)
                {
                    projects.RemoveAt(i);
                    break;
                }
            }
            HideRequestDeleteModal();
        }
        catch(Exception err){
            throw;
        }
    }
    protected async Task CancelDelete(){
        requestDelete = false;
        guidToDelete = string.Empty;
        nameToDelete = string.Empty;
    }

    protected void HideRequestDeleteModal(){
        requestDelete = false;
        guidToDelete = string.Empty;
        nameToDelete = string.Empty;
    }
}