@page "/Tickets/AddTicket"
@using Microsoft.AspNetCore.Components.Forms;
@using Models.Tickets;
@using System;
@inject Tools.Misc.AccessTokenHelper _accesstokenHelper;
@inject IConfiguration _configuration;
@inject NavigationManager _navigationManager;

<TicketSideMenu />

<div class="w3-container" style="margin-left:89px;">
    <div class="w3-row">
        <div class="w3-col m5">
            <div>
                <h1>Information about the ticket</h1>
                <p>Add new ticket</p>
                <EditForm Model="TicketForm" OnSubmit="FormTicketSubmit_Click">
                    <div class="w3-margin-top">
                        <label>Ticket name <span class="material-symbols-sharp w3-tiny" title="Name of the ticket you want to submit">question_mark</span></label>
                        <input @bind-value="TicketForm.Name" type="textbox" class="w3-input w3-padding" />
                    </div>
                    <div class="w3-margin-top">
                        <label>Project <span class="material-symbols-sharp w3-tiny" title="To which project do you want to add this ticket for?">question_mark</span></label>
                        <InputSelect @bind-Value="TicketForm.Project" class="w3-input w3-padding w3-transparent">
                            <option value="">--Select Project--</option>
                            @foreach(var project in availableProjects){
                                <option value="@project.guid">@project.name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="w3-margin-top">
                        <label>Type <span class="material-symbols-sharp w3-tiny" title="Available ticket type from the server that you can use">question_mark</span></label>
                        <InputSelect @bind-Value="TicketForm.Type" class="w3-input w3-padding w3-transparent">
                            <option value="">--Select Type--</option>
                            @foreach(var type in AvailableTicketTypes){
                                <option value="@type.Title">@type.Title</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="w3-margin-top">
                        <label>Severity <span class="material-symbols-sharp w3-tiny" title="How severe is this ticket to the project">question_mark</span></label>
                        <InputSelect @bind-Value="TicketForm.Severity" class="w3-input w3-padding w3-transparent">
                            <option value="">--Select Severity--</option>
                            @foreach(var severity in availableTicketSeverities){
                                <option value="@severity.Title">@severity.Title</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="w3-margin-top">
                        <label class="w3-bar-item">Description <span class="material-symbols-sharp w3-tiny" title="How severe is this ticket to the project">question_mark</span></label>
                        <div>
                            <div id="ticketDescriptionEditor">
                                the rich text editor here
                            </div>
                        </div>
                    </div>
                    <div class="w3-bar w3-margin-top">
                        <input type="submit" class="w3-bar-item w3-button w3-border w3-border-black w3-round w3-hover-black w3-ripple" value="Add Ticket" />
                    </div>
                </EditForm>
                
            </div>
        </div>
        <div class="w3-col m7">

        </div>
    </div>
</div>

@code{
    Ticket TicketForm = new Ticket();
    List<Models.Tickets.Type> AvailableTicketTypes = new List<Models.Tickets.Type>();
    List<Models.Tickets.Severity> availableTicketSeverities = new List<Models.Tickets.Severity>();
    List<Models.Projects.ProjectShortModel> availableProjects = new List<Models.Projects.ProjectShortModel>();

    protected override async Task OnInitializedAsync(){
        // Clear old variable (if available)

        string address = _configuration["BugTrackerBackendAddress"] + "/Ticket";
        string accesstoken = _accesstokenHelper.accessToken;

        // Load available ticket types
        try{
            var result = await new Models.Tickets.Type().GetAvailableTypes(accesstoken, address + "/Types");
            foreach(var type in result){
                AvailableTicketTypes.Add(type);
            }
        }catch(Exception e){
            Console.WriteLine(e.Message);
        }

        // Load available ticket severities
        try{
            var result = await new Models.Tickets.Severity().GetAvailableSeverities(accesstoken, address + "/Severities");
            foreach(var severity in result){
                availableTicketSeverities.Add(severity);
            }
        }   
        catch(Exception err){
            Console.WriteLine(err.Message);
        }

        // Load user projects
        try{
            string projectAddress = _configuration["BugTrackerBackendAddress"] + "/Project/GetProjects";
            var result = await new Models.Projects.Project().GetProjects(projectAddress, _accesstokenHelper.accessToken);
            foreach(var project in result){
                availableProjects.Add(project);
            }
        }
        catch(Exception err){
            Console.WriteLine(err.Message);
        }
        // Load SimpleHTMLEditor/Application.js file for description
    }

    protected async Task FormTicketSubmit_Click(){
        string address = _configuration["BugTrackerBackendAddress"] + "/Ticket?projectGuid=";
        
        // Find and assign project name to guid
        foreach(var project in availableProjects){
            if(project.guid.ToString() == TicketForm.Project){
                TicketForm.Project = project.name;
                address += project.guid.ToString();
                break;
            }
        }

        try{
            string accesstoken = _accesstokenHelper.accessToken;
            TicketForm.DateCreated = TicketForm.DateModified = DateTime.Now;
            TicketForm.guid = Guid.NewGuid();
            if(string.IsNullOrEmpty(TicketForm.Description))
                TicketForm.Description = "N/A";
            await new Models.Tickets.Ticket().AddTicket(TicketForm, accesstoken, address);
            _navigationManager.NavigateTo("/Tickets");
        }
        catch(Exception err){
            Console.WriteLine(err.Message);
        }
    }
}