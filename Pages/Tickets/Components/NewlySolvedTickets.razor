@using Models.Tickets;
@inject Tools.Misc.AccessTokenHelper _accesstokenHelper;
@inject IConfiguration _configuration;


@if(ticketLoadingStatus == 1){
    <ul class="w3-ul">
        @for(int i = 0; i < 4; i++){
            <a href="/Tickets/ViewTicket?id=@tickets[i].Guid" style="text-decoration:none;"><li class="w3-hover-black w3-ripple textOverflow">@tickets[i].Name</li></a>
        }
    </ul>
}
else if(ticketLoadingStatus == 2){
    <BugTracker.Components.Misc.NoContent.NoContent ImageUrl="" Message="No ticket found" />
}
else if(ticketLoadingStatus == -1){
    <BugTracker.Components.Misc.Errors.StandardErrorSmall Message="@message" />
}
else{
    <div style="width:100%; height:100%;">
        <BugTracker.Components.Misc.Loading.IsLoading Title="Still loading" />
    </div>
}


@code{

    int ticketLoadingStatus = 0; // 0 = loading | 1 = loaded | 2 = loaded but no tickets | -1 = has problem
    string message = string.Empty;


    List<SolvedTicket> tickets = new ();
    protected override async Task OnInitializedAsync(){
        string address = _configuration["BugTrackerBackendAddress"] + "/Ticket/SolvedTickets";
        try{
            var result = await new Ticket().GetSolvedTickets(_accesstokenHelper.accessToken, address);

            int counter = 0;
            foreach(var ticket in result.ToList()){
                tickets.Add(ticket);
                counter++;
                if(counter == 3) break;
            }
        }
        catch(Exception err){
            ticketLoadingStatus = -1;
            message = err.Message;
        }
    }
}