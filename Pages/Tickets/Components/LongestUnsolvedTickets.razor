@using Models.Tickets;
@inject Tools.Misc.AccessTokenHelper AccessTokenHelper;
@inject IConfiguration _configuration;

@if(hasError){
    <BugTracker.Components.Misc.NoContent.NoContent ImageUrl="@errorImage" Title="There are no high priority tickets found" />
}
else{
    <ul class="w3-ul">
        @foreach(var ticket in tickets){
            <a href="/Tickets/ViewTicket?id=@ticket.Key" style="text-decoration:none;"><li class="w3-hover-black w3-ripple">@ticket.Value</li></a>
        }
    </ul>
}

@code{
    bool hasError = false;
    string errorImage = "images/69a6b00a04b341828841fba193a51ee5_4970450105616380596.jpg";
    List<KeyValuePair<Guid, string>> tickets = new ();
    protected override async Task OnInitializedAsync(){
        string address = _configuration["BugTrackerBackendAddress"] + "/Ticket/LongestUnsolvedTickets";
        try{
            var receivedTickets = await new Ticket().GetLongestUnsolvedTickets(AccessTokenHelper.accessToken, address);
            foreach(var receivedTicket in receivedTickets){
                tickets.Add(new KeyValuePair<Guid, string>(receivedTicket.guid, receivedTicket.Name));
            }
        }
        catch(Exception err){
            hasError = true;
        }
    }
}