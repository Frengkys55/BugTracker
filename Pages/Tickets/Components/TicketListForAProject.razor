@inject Tools.Misc.AccessTokenHelper _accesstokenHelper;
@inject IConfiguration _configuration;

<div style="height:100%; width:100%; overflow-x: hidden; overflow-y:scroll;">
    @if(tickets.Count < 1){
        <div class="w3-display-container" style="width:100%; height:100%;">
            <div class="w3-display-middle">
                <img src="/images/l4uqgizqww241.gif" class="w3-image" />
                <div>
                    There is no ticket found. Kiana is happy... <a href="/Tickets/AddTicket">Create new ticket</a>
                </div>
            </div>
        </div>
    }
    else{
        @foreach(var ticket in tickets){
            <div class="w3-bar-block">
                <a href="/Tickets/ViewTicket?id=@ticket.Guid" class=" w3-bar-item w3-button w3-transparent w3-hover-black w3-border w3-border-black w3-round w3-ripple w3-margin-bottom">@ticket.Name</a>
            </div>
        }
    }
    
</div>

@code{
    [Parameter]
    public string? ProjectGuid {set; get;}

    List<Models.Tickets.TicketShortModel> tickets = new List<Models.Tickets.TicketShortModel>();
    
    protected override async Task OnInitializedAsync(){
        Console.WriteLine(ProjectGuid);
        if(ProjectGuid != string.Empty){
            string accesstoken = _accesstokenHelper.accessToken;
            string address = _configuration["BugTrackerBackendAddress"] + "/Ticket/" + ProjectGuid;
            try{
                var result = await new Models.Tickets.Ticket().GetProjectTickets(Guid.Parse(ProjectGuid), accesstoken, address);
                foreach(var ticket in result){
                    tickets.Add(ticket);
                }
            }
            catch(Exception err){
                Console.WriteLine(err.Message);
            }
        }

    }
}