@using ChartJs.Blazor;
@using ChartJs.Blazor.PieChart;
@using Models.Tickets;
@inject IConfiguration _configuration;
@inject Tools.Misc.AccessTokenHelper _accesstokenHelper;

<div style="width:100%; height:100%;" class="w3-center">
    @if(!isCompleted){
        <BugTracker.Components.Misc.Loading.IsLoading Message="You can watch Parerun dancing here while I process this data (or you can also do something else)" />
    }
    else{
        <Chart Config="@_config" Height="484" Width="484" />
    }
</div>

@code{
    bool isCompleted = false;
    PieConfig _config = new PieConfig{
        Options = new PieOptions{
            Responsive = false,
            Title = new OptionsTitle{
                Display = true,
                Text = "Chart of each ticket category",
            },
            MaintainAspectRatio = false,
        }
    };

    protected override async Task OnInitializedAsync(){
        string accesstoken = _accesstokenHelper.accessToken;
        string address = _configuration["BugTrackerBackendAddress"] + "/Ticket";
        
        ChartJs.Blazor.PieChart.PieDataset dataset = new ChartJs.Blazor.PieChart.PieDataset();

        // Get ticket severityes
        try{
            var result = await new Severity().GetAvailableSeverities(accesstoken, address + "/Severities");
            foreach(var severity in result){
                _config.Data.Labels.Add(severity.Title);
            }
        }
        catch(Exception err){
            Console.WriteLine(err.Message);
        }

        // Get all ticket details
        double[] severityArrayCounter = new double[_config.Data.Labels.Count];
        try{
            var result = await new Ticket().GetAllTicketsAsync(accesstoken, address + "/getalltickets");

            // Get all ticket detail (optimization needed ASAP)
            foreach(var ticket in result){
                var detail = await new Ticket().GetTicketDetail(ticket.Guid, accesstoken, address + "?id=" + ticket.Guid);
                var severityPosition = _config.Data.Labels.IndexOf(detail.Severity);
                severityArrayCounter[severityPosition]++;
            }
        }
        catch(Exception err){
            Console.WriteLine(err.Message);
        }

        dataset.AddRange(severityArrayCounter);

        // Assign random color to each dataset
        List<string> colors = new ();
        foreach(var item in _config.Data.Labels){
            colors.Add(ColorUtil.ColorHexString(Convert.ToByte(new Random().Next(0, 255)), Convert.ToByte(new Random().Next(0, 255)), Convert.ToByte(new Random().Next(0, 255))));
        }
        dataset.BackgroundColor = colors.ToArray();

        _config.Data.Datasets.Add(dataset);
        isCompleted = true;
    }
}