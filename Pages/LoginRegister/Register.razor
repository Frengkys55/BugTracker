@page "/Register"
@layout Pages.Layouts.LoginRegisterLayout
@using Models.Authentications;
@using Models.Users;
@inject NavigationManager navigationManager;
@inject IConfiguration _configuration;
@inject Tools.Misc.AccessTokenHelper _accesstokenHelper;
@inject NavigationManager _navigationManager;

<div class="w3-card w3-mobile" style="width:400px;">
    @if(hasError){
        <BugTracker.Components.Misc.Errors.StandardError Message="@errorMessage" Title="Welp Moment" />
        <button class="w3-button w3-transparent w3-round w3-border w3-bourder-black w3-hover-black w3-margin" @onclick="() => { hasError = false; }">Retry</button>
    }
    else{
        <div class="w3-cell-row">
            <div class="w3-cell w3-container w3-mobile">
                <div class="w3-row w3-margin-top">
                    <label>Username</label>
                    <input type="text" @bind-value="userName" class="w3-input w3-border-black" title="Your username" />
                </div>
                <div class="w3-row w3-margin-top">
                    <label>Email</label>
                    <input type="email" @bind-value="password" class="w3-input w3-border-black" title="Your email" />
                </div>
                <div class="w3-row w3-margin-top">
                    <label>Password</label>
                    <input type="password" @bind-value="password" class="w3-input w3-border-black" title="Your password" />
                </div>
                <div class="w3-bar w3-margin-top w3-margin-bottom">
                    <button class="w3-bar-item w3-button w3-border w3-border-black w3-round w3-hover-black w3-ripple" @onclick="btnRegister_ClickAsync">Register</button>
                </div>
            </div>
            <div class="w3-cell w3-cell-middle w3-container w3-mobile">
                <div class="w3-bar-block">
                    <button class="w3-bar-item w3-button w3-round w3-border w3-border-black w3-hover-black w3-ripple w3-margin-bottom" @onclick="btnLogin_ClickAsync">Login</button>
                </div>
            </div>
        </div>
    }
</div>

@code{
    string? userName = string.Empty;
    string? password = string.Empty;
    string? email = string.Empty;

    bool hasError = false;

    string errorTitle = string.Empty;
    string errorMessage = string.Empty;

    protected async Task btnRegister_ClickAsync(){

        // Check user
        if(string.IsNullOrEmpty(userName) || string.IsNullOrEmpty(password)){
            hasError = true;
            errorMessage = "Well, if for whatever reason I managed to register you with an empty password, username or email, how, on earth would I log you in?";
            return;
        }

        UserRegisterModel user = new UserRegisterModel(){
            UserName = new Tools.Misc.Hash().SHA512(userName),
            Password = new Tools.Misc.Hash().SHA512(password),
            Email = new Tools.Misc.Hash().SHA512(email!)
        };

        string address = _configuration["BugTrackerBackendAddress"] + "/Authentication/Register";
        try{
            var result = await new User().CreateUser(user, address);

            if(result == 1){
                _navigationManager.NavigateTo("/Login");
            }
            else{
                hasError = true;
                errorMessage = "Something just happeded and thus this message";
            }

        }
        catch(Exception err){
            hasError = true;
            errorMessage = err.Message;
        }
    }

    protected async Task btnLogin_ClickAsync(){
        _navigationManager.NavigateTo("/login");
    }
}