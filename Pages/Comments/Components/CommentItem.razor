@using Models.Comments;
@inject Tools.Misc.AccessTokenHelper _accesstokenHelper;
@inject IConfiguration _configuration;

<div class="w3-bar-item w3-card w3-round w3-margin-top">
    @if(!hasError){
        <div class="w3-row">
            <div class="w3-col w3-right w3-mobile w3-text-gray" style="width:100px;">
                <div class="w3-tiny">
                    <span class="">
                        @if(Comment!.DateCreated != null){
                            @Tools.Misc.DateTimeToStringConverter.Convert(Comment.DateCreated)
                        }
                    </span>
                </div>
                <div>
                    <span class="">
                        @if(Comment.DateCreated != null){
                            @Comment.DateCreated.Value.ToLocalTime().ToShortTimeString()
                        }
                    </span>
                </div>
                <div class="w3-margin-top">
                    <button type="button" class="w3-block w3-button w3-hover-red w3-ripple w3-round w3-border w3-border-black w3-hover-border-red" @onclick="DeleteTicket_Click"><span class="material-symbols-sharp">delete</span></button>
                </div>
            </div>
            <div class="w3-rest w3-mobile">
                <span>@Comment.CommentText</span>
            </div>
        </div>
    }
    else{
        <BugTracker.Components.Misc.Errors.StandardErrorSmall Message="@errorMessage" />
    }
    

</div>
    @if(requestDelete){
        <BugTracker.Components.Misc.Confirmation.ConfirmationModal Guid="@Comment!.guid.ToString()" Message="This action is permanent. Are you sure you want to continue?" OnConfirm="@ConfirmDelete_ClickAsync" OnCancel="@CancelDelete_ClickASync" />
    }


@code{
    [Parameter]
    public Comment? Comment {set; get;}
    bool requestDelete = false;

    bool hasError = false;
    string errorMessage = string.Empty;

    [Parameter]
    public EventCallback<Guid> OnDeleteConfirmed {set; get;}

    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }

    protected void DeleteTicket_Click(){
        requestDelete = true;
    }

    protected async Task ConfirmDelete_ClickAsync(){
        string address = _configuration["BugTrackerBackendAddress"] + "/Comment?id=" + Comment!.guid.ToString();
        string accesstoken = _accesstokenHelper.accessToken;

        try{
            var result = await new Comment().DeleteComment(Comment.guid, address, accesstoken);
            if(OnDeleteConfirmed.HasDelegate){
                await OnDeleteConfirmed.InvokeAsync(Comment.guid);
            }
            requestDelete = false;
        }
        catch(Exception err){
            hasError = true;
            errorMessage = err.Message;
        }
    }

    protected async Task CancelDelete_ClickASync(){
        requestDelete = false;
        await Task.Yield();
    }
}