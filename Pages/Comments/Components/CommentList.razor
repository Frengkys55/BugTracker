@using Microsoft.AspNetCore.Components.Forms;
@using Models.Comments;
@inject IConfiguration _configuration;
@inject Tools.Misc.AccessTokenHelper _accesstokenHelper;

<div style="height:100%">
    <div class="w3-border w3-border-black w3-round" style="height:100%;">
        <div class="w3-container" style="height: calc( 100% - 39.5px ); overflow-x:hidden; overflow-y: scroll;">
            <div class="w3-bar-block">
                @if(comments.Count > 0){
                    @foreach(var comment in comments){
                        <CommentItem Comment="@comment" />
                    }
                }
            </div>
            
        </div>
        <div class="w3-border-top w3-border-black">
            <div class="w3-row">
                <div class="w3-col w3-right" style="width:56px;">
                    <button id="btnSendComment" @onclick="btnSendComment" class="w3-block w3-button w3-transparent w3-hover-black w3-ripple w3-right" style="height:39.5px;" title="Add comment"><span class="material-symbols-sharp">send</span></button>
                </div>
                <div class="w3-rest">
                    <input type="text" class="w3-input w3-border-black" placeholder="Add comment" style="border-radius:0px 0px 0px 4px;" @bind-value="commentText" />
                </div>
            </div>
        </div>
    </div>
</div>

@code{
    [Parameter]
    public Guid Guid {set; get;}
    
    string commentText = string.Empty;
    List<Models.Comments.Comment> comments = new List<Models.Comments.Comment>();

    protected async Task btnSendComment(){
        if(commentText != string.Empty){
            Models.Comments.Comment comment = new Models.Comments.Comment();
            comment.CommentText = commentText;
            comment.DateCreated = DateTime.Now;
            comments.Add(comment);
            commentText = string.Empty;
        }
    }

    protected override async Task OnInitializedAsync(){
        await LoadAvailableComments(Guid);
    }

    protected async Task LoadAvailableComments(Guid ticketGuid){
        string address = _configuration["BugTrackerBackendAddress"] + "/Comment";
        var result = await new Comment().GetComments(Guid, address, _accesstokenHelper.accessToken);
    }
}