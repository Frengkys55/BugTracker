@page "/Projects/Edit/{guid}"
@using Models.Projects;
@using Microsoft.AspNetCore.Components.Forms;
@using System.Text;
@using SkiaSharp;
@inject IConfiguration _configuration;
@inject Tools.Misc.AccessTokenHelper _accresstokenHelper;
@inject NavigationManager _navigation;

<NavMenu />
<div class="w3-container">
    <div class="w3-row">
        <div class="w3-col m4">
            <header>
                Edit Project
            </header>
            <EditForm Model="project" OnSubmit="EditProjectOnDatabaseAsync">
                <div>
                    <label>Title</label>
                    <InputText id="txtProjectTitle" @bind-Value="project.Name" class="w3-input" />
                </div>
                <div>
                    <label>Description</label>
                    <InputTextArea id="txtProjectDescription" @bind-Value="project.Description" class="w3-input" />
                </div>
                <div>
                    <label>Project Image</label>
                    <InputFile OnChange="OnIconFileChanged_ClickAsync" class="w3-input" />
                </div>
                <div>
                    <label>Project Background</label>
                    <InputFile OnChange="OnBackgroundFileChanged_ClickAsync" class="w3-input" />
                </div>
                <div class="w3-margin-top">
                    <input type="submit" value="Save changes" class="w3-button w3-transparent w3-border w3-border-black w3-hover-black w3-round w3-ripple" title="Save changes" />
                </div>
            </EditForm>
        </div>
        <div class="w3-col m4">
            <header class="w3-container">
                <h1>Preview</h1>
            </header>
            <div class="w3-container">
                <div id="pnlProjectPreview" class="w3-display-container w3-block backgroundCover w3-block" style="height:442px; background-image:url('@backgroundImage');">
                    <div class="w3-display-topleft w3-block backgroundCover" style="height:calc( 100% - 300px ); background-image:url('@backgroundImage);">
                        <img class="w3-display-middle w3-image" style="height:50%;" src="@iconImage" />
                    </div>
                    <div id="pnlProjectPreviewOverviewContainer" class="w3-display-bottomleft w3-block w3-theme-d5 backdropBlur" style="height:300px;">
                        <header id="headProject2Title" class="w3-container">
                            <h1 class="w3-medium w3-wide textOverflow" title="@project.Name">@project.Name</h1>
                        </header>
                        <div id="pnlProjectPreviewTicketOverviewContainer" class="w3-bar w3-border-top w3-border-bottom w3-border-white">
                            <div class="w3-left">
                                <div class="w3-bar-item w3-button w3-transparent w3-hover-white w3-ripple" title="See posted tickets"><span class="material-symbols-sharp">problem</span></div>
                                <div class="w3-bar-item w3-button w3-transparent w3-hover-white w3-ripple" title="Edit project"><span class="material-symbols-sharp">edit</span></div>
                            </div>
                            <div class="w3-right">
                                <div class="w3-bar-item w3-button w3-transparent w3-hover-white w3-ripple"><span class="material-symbols-sharp" title="Delete this project">delete</span></div>
                            </div>
                        </div>
                        <div id="pnlProjectPreviewLatestTicketOverviewContainer">
                            <div class="w3-bar">
                                <label class="w3-bar-item">Latest Tickets 0</label>
                            </div>
                            <div class="w3-bar-block w3-container">
                                @for(int i = 0; i < 3; i++){
                                    <div class="w3-bar-item w3-button w3-transparent w3-border w3-border-white w3-hover-white w3-round textOverflow w3-margin-bottom">Your Ticket</div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    
        <div class="w3-col m4">
            <header>
                <h1>A bit of help</h1>
            </header>
            <div>
                <header>
                    <span><b>Project name</b></span>
                </header>
                <div>
                    <p>This is the name of your project</p>
                </div>
            </div>
            <div>
                <header>
                    <span><b>Description</b></span>
                </header>
                <div>
                    Describe what this project is. What did it do? Try to describe your project as clearly as possible to make sure you don't get confused later on.
                </div>
            </div>
            <div>
                <header>
                    <span><b>Project image</b></span>
                </header>
                <div>
                    Upload your project image (if available) to display your project visually.
                </div>
            </div>
        </div>
    </div>
    @if(hasProblem){
        <div id="pnlProblem" class="w3-card w3-white w3-round w3-border w3-border-black w3-animate-left" style="position:absolute; top:16px; left: 16px;">
            <div class="w3-cell-row">
                <div class="w3-cell w3-cell-middle w3-xxxlarge w3-mobile w3-center w3-container">
                    <span class="material-symbols-sharp w3-xxxlarge">Error</span>
                </div>
                <div class="w3-cell w3-cell-middle w3-container">
                    <header>
                        <h3>
                            @statusCode
                        </h3>
                    </header>
                    <div>
                        @problemMessage
                    </div>
                </div>
            </div>
            <div class="w3-bar w3-padding w3-center">
                <button class="w3-bar-item w3-button w3-transparent w3-hover-black w3-ripple w3-round w3-border w3-border-black w3-center" @onclick="CloseProblem_Click">Close</button>
            </div>
        </div>
    }
</div>

@code{
    [Parameter]
    public string guid {set; get;}
    #region Project
    Project project = new Project();

    string iconImage = string.Empty;
    string backgroundImage = string.Empty;

    string iconImageBackup = string.Empty;

    string backgroundImageBackup = string.Empty;
    
    MemoryStream iconStream = new MemoryStream();
    MemoryStream backgroundStream = new MemoryStream();

    #endregion Project

    #region Error handling

    bool hasProblem = false;
    int statusCode = 0;
    string problemMessage = string.Empty;

    #endregion Error handling

    protected override async Task OnInitializedAsync(){
        project.Name = "Replace this placeholder text";
        try{
            string address = _configuration["BugTrackerBackendAddress"] + "/Project";
            project = await new Project().ReadProject(Guid.Parse(guid), address, _accresstokenHelper.accessToken);
            string blobInitialString = "data:image/png;base64,";

            #region Image loading

            #region icon
            
            try{
                iconImageBackup = project.IconUrl;

                if(!project.IconUrl.ToLower().StartsWith("http") && project.IconUrl.ToLower().Contains("n/a")){
                    var sb = new StringBuilder();
                    sb.Append(blobInitialString);
                    sb.Append(project.IconUrl);
                    iconImage = sb.ToString();
                }
                else{
                    iconImage = project.IconUrl;
                }
            }
            catch(Exception){
                iconImage = "N/A";
            }

            #endregion icon

            #region background
            try{
                backgroundImageBackup = project.BackgroundImageUrl;

                if(!project.BackgroundImageUrl.ToLower().StartsWith("http") && project.BackgroundImageUrl.ToLower().Contains("n/a")){
                    var sb = new StringBuilder();
                    sb.Append(blobInitialString);
                    sb.Append(project.BackgroundImageUrl);
                    backgroundImage = sb.ToString();
                }
                else{
                    backgroundImage = project.BackgroundImageUrl;
                }
            }
            catch(Exception){
                backgroundImage = "N/A";
            }
            #endregion background

            #endregion Image loading
            try{
                //iconImage = project.IconUrl;
                //backgroundImage = project.BackgroundImageUrl;
            }
            catch(Exception err){
                Console.WriteLine(err.Message);
            }
            //StateHasChanged();
        }
        catch(Exception err){
            hasProblem = true;
            statusCode = 500;
            problemMessage = err.Message;
        }
    }

    private async Task EditProjectOnDatabaseAsync(){
        project.AccessToken = _accresstokenHelper.accessToken;
        string address = _configuration["BugTrackerBackendAddress"] + "/Project";

        // Update icon if there is a change. Skip when there is no change
        if(iconImage.CompareTo(project.IconUrl) == 0){
            iconStream.Position = 0;
            project.IconUrl = Convert.ToBase64String(iconStream.ToArray());
        }
        
        // Update background if there is a change. Skip when there is no change
        if(backgroundImage.Contains(project.BackgroundImageUrl)){
            backgroundStream.Position = 0;
            project.BackgroundImageUrl =  Convert.ToBase64String(backgroundStream.ToArray());
        }

        try{
            if(string.IsNullOrEmpty(project.Name))
                throw new Exception("Oh come on! I need to know your project name!");
            await new Project().UpdateProject(project, address);
            _navigation.NavigateTo("/Projects");
        }
        catch(Exception err){
            hasProblem = true;
            statusCode = 400;
            problemMessage = err.StackTrace;
            throw;
        }
    }

    protected async Task CloseProblem_Click(){
        hasProblem = false;
        statusCode = 0;
        problemMessage = string.Empty;
    }

    protected async Task OnIconFileChanged_ClickAsync(InputFileChangeEventArgs e){
        string blobData = "data:image/png;base64,";
        string iconBackup = project.IconUrl;
        if(e.FileCount > 0){
            await e.File.OpenReadStream(2097152).CopyToAsync(iconStream);

            var sb = new StringBuilder();
            sb.Append(blobData);
            sb.Append(Convert.ToBase64String(iconStream.ToArray()));
            iconImage = sb.ToString();
        }
        else{
            iconImage = project.BackgroundImageUrl;
        }
    }

    protected async Task OnBackgroundFileChanged_ClickAsync(InputFileChangeEventArgs e){
        string blobData = "data:image/png;base64,";
        
        if(e.FileCount > 0){
            await e.File.OpenReadStream(2097152).CopyToAsync(backgroundStream);

            var sb = new StringBuilder();
            sb.Append(blobData);
            sb.Append(Convert.ToBase64String(backgroundStream.ToArray()));
            backgroundImage = sb.ToString();
        }
        else{
            backgroundImage = project.BackgroundImageUrl;
        }
    }
}