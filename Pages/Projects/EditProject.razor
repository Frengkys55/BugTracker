@page "/Projects/Edit"
@using Models.Projects;
@using Microsoft.AspNetCore.Components.Forms;
@inject IConfiguration _configuration;
@inject Tools.Misc.AccessTokenHelper _accresstokenHelper;

<NavMenu />
<div class="w3-container">
    <div class="w3-row">
        <div class="w3-col m4">
            <header>
                Edit Project
            </header>
            <EditForm Model="@project" @onsubmit="EditProjectOnDatabaseAsync">
                <div>
                    <label>Title</label>
                    <InputText id="txtProjectTitle" @bind-Value="project.Name" class="w3-input" />
                </div>
                <div>
                    <label>Description</label>
                    <InputTextArea id="txtProjectDescription" @bind-Value="project.Description" class="w3-input" />
                </div>
                <div>
                    <label>Project Image</label>
                    <InputText id="txtProjectIcon" @bind-Value="project.IconUrl" class="w3-input" />
                </div>
                <div>
                    <label>Project Background</label>
                    <InputText id="txtProjectIcon" @bind-Value="project.BackgroundImageUrl" class="w3-input" />
                </div>
                <div>
                    <input type="submit" value "Save" class="w3-button w3-transparent w3-border w3-border-black w3-hover-black w3-round w3-ripple" />
                </div>
            </EditForm>
        </div>
    </div>
    @if(hasProblem){
        <div id="pnlProblem" class="w3-card w3-white w3-round w3-border w3-border-black w3-animate-left" style="position:absolute; top:16px; left: 16px;">
            <div class="w3-cell-row">
                <div class="w3-cell w3-cell-middle w3-xxxlarge w3-mobile w3-center w3-container">
                    <span class="material-symbols-sharp w3-xxlarge">Error</span>
                </div>
                <div class="w3-cell w3-cell-middle w3-container">
                    <header>
                        <h3>
                            @statusCode
                        </h3>
                    </header>
                    <div>
                        @problemMessage
                    </div>
                </div>
            </div>
            <div class="w3-bar w3-padding w3-center">
                <button class="w3-bar-item w3-button w3-transparent w3-hover-black w3-ripple w3-round w3-border w3-border-black w3-center" @onclick="CloseProblem_Click">Close</button>
            </div>
        </div>
    }
</div>

@code{

    #region Project
    Project project = new Project();

    #endregion Project

    #region Error handling

    bool hasProblem = false;
    int statusCode = 0;
    string problemMessage = string.Empty;

    #endregion Error handling

    protected override async Task OnInitializedAsync(){
        
    }

    protected async Task EditProjectOnDatabaseAsync(){
        try{

        }
        catch(Exception err){
            hasProblem = true;
            statusCode = 500;
            problemMessage = err.Message;
        }
    }

    protected async Task CloseProblem_Click(){
        hasProblem = false;
        statusCode = 0;
        problemMessage = string.Empty;
    }
}