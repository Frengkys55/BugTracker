@using Models.Tickets;
@using Microsoft.AspNetCore.Components;
@using Models.Projects;
@using System.Text;
@inject IConfiguration _configuration;
@inject Tools.Misc.AccessTokenHelper _accesstokenHelper;

<div id="pnlProjectContainer_@Guid" class="w3-bar-item">
    <div id="pnlProject_@Guid" class="w3-display-container w3-block backgroundCover w3-round w3-card" style="width:335px; height:442px; background-image:url('@Background');">
        <div class="w3-display-topleft w3-block backgroundCover" style="height:calc( 100% - 300px ); background-image:url('@Background');">
            @if(iconType == 1){
                <img class="w3-display-middle w3-image" style="height:50%;" src="@Icon" />
            }
            else{
                <div class="w3-display-middle w3-center">
                    <span class="material-symbols-sharp w3-xxxlarge">panorama</span><br />
                    <span>No image found</span>
                </div>
            }
        </div>
        <div id="pnlProjectOverviewContainer_@Guid" class="w3-display-bottomleft w3-block w3-theme-d5 backdropBlur" style="height:300px; border-radius:0px 0px 4px 4px;">
            <header id="headProject2Title" class="w3-container">
                <h1 class="w3-medium w3-wide textOverflow" title="@Name">@Name</h1>
            </header>
            <div id="pnlProjectTicketOverviewContainer_@Guid" class="w3-bar w3-border-top w3-border-bottom w3-border-white">
                <div class="w3-left">
                    <a href="/Projects/ViewProject?id=@Guid" class="w3-bar-item w3-button w3-transparent w3-hover-white w3-ripple" title="See posted tickets"><span class="material-symbols-sharp">visibility</span></a>
                    <a href="/Projects/Edit/@Guid" class="w3-bar-item w3-button w3-transparent w3-hover-white w3-ripple" title="Edit project"><span class="material-symbols-sharp">edit</span></a>
                </div>
                <div class="w3-right">
                    <button class="w3-bar-item w3-button w3-transparent w3-hover-white w3-ripple" @onclick="@(() => OnClick.InvokeAsync(e))"><span class="material-symbols-sharp" title="Delete this project">delete</span></button>
                </div>
            </div>
            <div id="pnlProjectLatestTicketOverviewContainer_@Guid">
                @if(ticketIsLoading == 1){
                    <div class="w3-bar">
                        <label class="w3-bar-item">Tickets (@TicketCount)</label>
                    </div>
                    <div class="w3-bar-block w3-container">
                        @if(_Tickets.Count > 0){
                            @foreach(var ticket in _Tickets){
                                <a href="/Tickets/ViewTicket?id=@ticket.guid" class="w3-bar-item w3-button w3-transparent w3-border w3-border-white w3-hover-white w3-round textOverflow w3-margin-bottom">@ticket.Name</a>
                            }
                        }
                        else{

                        }
                        
                    </div>
                }
                else if(ticketIsLoading == 2){
                    <div style="height:200px; width:100%;">
                        <BugTracker.Components.Misc.NoContent.NoContent ImageUrl="images/l4uqgizqww241.gif" Message="No ticket" />
                    </div>
                }
                else if(ticketIsLoading == -1){
                    <BugTracker.Components.Misc.Errors.StandardError Title="Welp Moment" Message="@errorMessage" />
                }
                else{
                    <BugTracker.Components.Misc.Loading.IsLoading Message="Loading" />
                }
                
            </div>
        </div>
    </div>
</div>

@code{
    int iconType = 0; // 0: url | 1: string | -1:no image
    int backgroundType = 0; // 0: url | 1: string | -1:no image

    /// <summary>
    /// The project's guid
    /// </summary>
    /// <value></value>
    [Parameter]
    public string? Guid {set; get;}

    /// <summary>
    /// The project's name
    /// </summary>
    /// <value></value>
    [Parameter]
    public string? Name {set; get;}

    /// <summary>
    /// The project's Icon
    /// </summary>
    /// <value></value>
    [Parameter]
    public string? Icon {set; get;}

    /// <summary>
    /// The project's background image (leave empty will use white background)
    /// </summary>
    /// <value></value>
    [Parameter]
    public string? Background {set; get;}

    /// <summary>
    /// The project's ticket (handled by this card)
    /// </summary>
    /// <value></value>
    List<Ticket> _Tickets = new ();
    int TicketCount = 0;
    [Parameter]
    public EventCallback<ProjectShortEventArgs> OnClick {set; get;}
    ProjectShortEventArgs e = new ();


    int ticketIsLoading = 0;
    string errorMessage = string.Empty;

    string blobInitialString = "data:image/png;base64,";

    protected override void OnParametersSet(){
        e.guid = Guid;
        e.Name = Name;
    }
    protected override async Task OnInitializedAsync(){
        #region Image blob loading
        try{
            // Try converting to byte array (will continue if succed, will throw error if not)
            Convert.FromBase64String(Icon!);

            var sb = new StringBuilder();
            sb.Append(blobInitialString);
            sb.Append(Icon);
            Icon = sb.ToString();
            iconType = 1;
        }
        catch(Exception){
            // Check for valid url
            if(!Tools.Misc.UriValidator.IsValidURL(Icon!)){
                Icon = "N/A";
                iconType = -1;
            }
        }

        try{
            // Try converting to byte array (will continue if succed, will throw error if not)
            Convert.FromBase64String(Background!);

            var sb = new StringBuilder();
            sb.Append(blobInitialString);
            sb.Append(Background);
            Background = sb.ToString();
        }
        catch(Exception){
            // Check for valid url
            if(!Tools.Misc.UriValidator.IsValidURL(Background!)){
                Background = "N/A";
            }
        }

        #endregion Image blob loading
        try{
            string address = _configuration["BugTrackerBackendAddress"] + "/Ticket/" + Guid;
            var receivedTicket = await new Models.Tickets.Ticket().GetProjectTickets(new Guid(Guid!), _accesstokenHelper.accessToken, address);

            TicketCount = receivedTicket.Count();
            if(TicketCount > 0) ticketIsLoading = 1;
            else ticketIsLoading = 2;

            int counter = 0;
            foreach(var ticket in receivedTicket){
                _Tickets.Add(new Ticket(){
                    Name = ticket.Name,
                    guid = ticket.Guid,
                    DateCreated = ticket.DateCreated,
                });
                if(++counter > 3)
                    break;
                else
                    counter++;
            }
        }
        catch (Exception err){
            ticketIsLoading = 2;
            errorMessage = err.Message;
        }
    }

    protected void OnRequestDelete_Click(){
        OnClick.InvokeAsync(e);
    }
}