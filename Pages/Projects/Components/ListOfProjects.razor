@using Models.Projects
@inject IConfiguration _configuration;
@inject Tools.Misc.AccessTokenHelper _accesstokenHelper;

@if(isLoaded == 0){
    <div class="w3-center">
        <img src="/images/Eie9.gif" class="w3-image" style="max-height:300px;" />
    </div>
}
else if(isLoaded == -1){
    <div class="w3-center">
        <img src="/images/69a6b00a04b341828841fba193a51ee5_4970450105616380596.jpg" class="w3-image" style="max-height:300px;" />
    </div>
    <div class="w3-center">
        Fail to load projects. <br />
        @errorMessage
    </div>
}
else if (isLoaded == 1){
    <div class="w3-bar-block w3-container">
        @foreach(var project in projects!){
            <a href="/Projects/ViewProject?id=@project.guid" style="text-decoration:none;">
                <div class="w3-bar-item w3-button w3-hover-black w3-border w3-border-black w3-round w3-ripple w3-margin-bottom">
                    <header>
                        <span class="w3-medium w3-block textOverflow"><b>@project.name</b></span>
                    </header>
                </div>
            </a>
        }
    </div>
}
else if (isLoaded == 2){
   <div class="w3-display-container" style="height:300px; width:100%;">
        <div class="w3-display-middle w3-container">
            <img src="/images/sadkiana.gif" class="w3-image" />
            <div>No project was found. Kiana is very sad... <a href="/Projects/AddProject">Create new project</a></div>
        </div>
    </div>
}
    
@code{
    ICollection<ProjectShortModel>? projects;
    int isLoaded = 0; // -1: Load failed| 0: Loading | 1: Loaded | 2: No content found
    string errorMessage = string.Empty;
    
    protected override async Task OnInitializedAsync(){
        string address = _configuration["BugTrackerBackendAddress"] + "/Project/GetProjects";
        try{
            projects = await new Models.Projects.Project().GetProjects(address, _accesstokenHelper.accessToken);
            if(projects.Count > 0)
                isLoaded = 1;
            else
                isLoaded = 2;
        }catch(Exception err){
            isLoaded = -1;
            errorMessage = err.Message;
        }
    }
}