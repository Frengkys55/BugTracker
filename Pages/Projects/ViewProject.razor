@page "/Projects/ViewProject"

@using Models.Projects;
@using Models.Tickets;
@using System.Text;
@inject NavigationManager navManager
@inject Tools.Misc.AccessTokenHelper _accesstokenHelper;
@inject IConfiguration _configuration;

<NavMenu />
<div>
    <div class="w3-row">
        <div class="w3-col m5">
            <header>
                <div class="w3-display-container backgroundCover" style="height:500px; width:100%; background-image:url(@projectBackground)">
                    <div class="w3-display-bottomleft w3-block backdropBlur w3-theme-d5 w3-padding">
                        <div class="w3-cell w3-padding">
                            <img src="@projectIcon" class="" style="height: 100px;" />
                        </div>
                        <div class="w3-cell w3-cell-middle">
                            <h1 class="w3-container">@project.Name</h1>
                        </div>
                    </div>
                </div>
                <div class="w3-bar">
                    <span class="w3-bar-item w3-text-grey">id: @id.ToString()</span>
                    <button @onclick="() => {btnEditTicket(project.Guid);}" class="w3-bar-item w3-button w3-transparent w3-hover-black w3-border w3-border-black w3-round w3-ripple w3-right">Edit</button>
                </div>
            </header>
            <div class="w3-container w3-margin-top">
                <div class="w3-row">
                    <div class="w3-third">
                        Number of tickets:<br />
                        <span class="w3-xxlarge">@ticketNumber</span>
                    </div>
                    <div class="w3-third">
                        Created on<br />
                        @Tools.Misc.DateTimeToStringConverter.Convert(project.DateCreated)
                    </div>
                    <div class="w3-third">
                        Last modified on<br />
                        @if(project.DateModified.Subtract(project.DateCreated).TotalDays > 0){
                            @Tools.Misc.DateTimeToStringConverter.Convert(project.DateModified)
                        }
                        else{
                            <span>None</span>
                        }
                    </div>
                </div>
            </div>
            <div class="w3-container w3-margin-top">
                <header>
                    <span><b>Description</b></span>
                </header>
                <div>
                    @project.Description
                </div>
            </div>
        </div>
        <div class="w3-col m7">
            <header class="w3-container">
                <h1>Tickets</h1>
                <a href="/Tickets/AddTicket" class="w3-button w3-transparent w3-hover-black w3-border w3-border-black w3-round w3-ripple w3-margin-bottom">Add Ticket</a>
            </header>
            <div class="w3-container" style="height:500px;">
                <BugTracker.Pages.Tickets.Components.TicketListForAProject ProjectGuid="@id.ToString()"  />
            </div>
        </div>
    </div>
    @if(hasProblem){
        <div id="pnlProblem" class="w3-card w3-white w3-round w3-border w3-border-black w3-animate-left" style="position:absolute; top:16px; left: 16px;">
            <div class="w3-cell-row">
                <div class="w3-cell w3-cell-middle w3-xxxlarge w3-mobile w3-center w3-container">
                    <span class="material-symbols-sharp w3-xxlarge">Error</span>
                </div>
                <div class="w3-cell w3-cell-middle w3-container">
                    <header>
                        <h3>
                            @statusCode
                        </h3>
                    </header>
                    <div>
                        @problemMessage
                    </div>
                </div>
            </div>
            <div class="w3-bar w3-padding w3-center">
                <button class="w3-bar-item w3-button w3-transparent w3-hover-black w3-ripple w3-round w3-border w3-border-black w3-center" @onclick="CloseProblem_Click">Close</button>
            </div>
        </div>
    }
</div>

@code{
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid id{set; get;}

    #region Project Information
    
    string projectName = string.Empty;
    string projectIcon = string.Empty;
    string projectBackground = string.Empty;
    string createdDate = string.Empty;
    
    int ticketNumber = 0;
    string dateCreated = DateTime.Now.Date.ToString();
    #endregion Project Information

    bool hasProblem = false;
    int statusCode {get; set;}
    
    string? problemMessage {get; set;}

    Models.Projects.Project project = new ();

    string blobInitialString = "data:image/png;base64,";

    protected override async Task OnInitializedAsync(){
        if(id == Guid.Empty){
            navManager.NavigateTo("/Projects");
        }
        string address = _configuration["BugTrackerBackendAddress"] + "/Project";
        System.Console.WriteLine(id);
        try{
            project = await new Project().ReadProject(id, address, _accesstokenHelper.accessToken);

            projectName = project.Name;

            if(!project.IconUrl.ToLower().StartsWith("http") && project.IconUrl.ToLower() != "n/a"){
                var sb = new StringBuilder();
                sb.Append(blobInitialString);
                sb.Append(project.IconUrl);
                projectIcon = sb.ToString();
            }
            else{
                projectIcon = project.IconUrl;
            }

            if(!project.BackgroundImageUrl.ToLower().StartsWith("http") && project.BackgroundImageUrl.ToLower() != "n/a"){
                var sb = new StringBuilder();
                sb.Append(blobInitialString);
                sb.Append(project.BackgroundImageUrl);
                projectBackground = sb.ToString();
            }
            else{
                projectBackground = project.BackgroundImageUrl;
            }
        }
        catch(Exception err){
            hasProblem = true;
            statusCode = 500;
            problemMessage = err.Message;
        }

        // Count ticket
        address = _configuration["BugTrackerBackendAddress"] + "/Ticket/" + id.ToString();
        var result = await new Ticket().GetProjectTickets(id, _accesstokenHelper.accessToken, address);
        ticketNumber = result.Count();
    }

    protected void CloseProblem_Click(){
        hasProblem = false;
        problemMessage = string.Empty;
        statusCode = 0;
    }

    protected void OnTicketLoadingComplete(int i){
        ticketNumber = i;
    }

    protected void btnEditTicket(Guid projectGuid){
        navManager.NavigateTo("/Projects/Edit/" + projectGuid);
    }
}